# This is based on https://github.com/Azure/actions-workflow-samples/blob/master/Kubernetes/build-and-deploy-docker-image-to-aks-using-helm.yml

on: [push]

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: klausazurepoc
  CLUSTER_NAME: azure-poc-cluster
  CLUSTER_RESOURCE_GROUP: azure-poc
  NAMESPACE: default

jobs:
  build:
    runs-on: ubuntu-latest
    environment: testing
    steps:
    - uses: actions/checkout@master

    # Setup Node
    - uses: actions/setup-node@v3
      with:
        node-version: 14.18.1

    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Build Nx apps
    - run: |
        npm i
        npx nx build

    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Container build and push to a Azure Container registry (ACR)
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/api:${{ github.sha }} --file ./apps/api/Dockerfile
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/api:${{ github.sha }}
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/html:${{ github.sha }} --file ./apps/html/Dockerfile
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/html:${{ github.sha }}

    # Set the target Azure Kubernetes Service (AKS) cluster.
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}

    # # Baking the helm chart to generate the manifests to deploy
    # - uses: azure/k8s-bake@v1
    #   with:
    #     renderEngine: 'helm2'
    #     helmChart: './my-helm-chart/'
    #     helm-version: 'latest'
    #   id: bake

    # # Deploy app to AKS
    # - uses: azure/k8s-deploy@v1
    #   with:
    #     manifests: ${{ steps.bake.outputs.manifestsBundle }}
    #     images: |
    #       ${{ env.REGISTRY_NAME }}.azurecr.io/api:${{ github.sha }}
    #       ${{ env.REGISTRY_NAME }}.azurecr.io/html:${{ github.sha }}
    #     imagepullsecrets: |
    #       ${{ env.REGISTRY_NAME }}-registry-connection
    #     namespace: ${{ env.NAMESPACE }}
